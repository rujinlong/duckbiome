---
title: "60-import"
title-block-banner: true
author:
  - name: Shujie Tian
date: 2025-04-28
toc: true
toc-depth: 4
number-sections: true
code-fold: true
code-line-numbers: true
code-tools: true
format: 
  html:
    embed-resources: true
    smooth-scroll: true
    page-layout: full
reference-location: section
citation-location: document
params:
  name: "60-import"
---

**Updated: `r format(Sys.time(), '%Y-%m-%d %H:%M:%S', tz = 'CET')` CET.**

The purpose of this document is ...

```{r setup}
#| message: false
#| include: false
#| warning: false
wd <- "analyses"
if (basename(getwd()) != wd) {
  setwd(here::here(wd))
}
params <- list(name = "60-import")
here::i_am(paste0(params$name, ".qmd"), uuid = "3f685402-0142-4216-a392-823aac530ce1")
projthis::proj_create_dir_target(params$name, clean = FALSE)
path_target <- projthis::proj_path_target(params$name)
path_source <- projthis::proj_path_source(params$name)
path_raw <- path_source("00-raw")
path_resource <- here::here(path_raw, "d00-resource")
path_data <- here::here(path_raw, paste0("d", params$name))
dir.create(path_raw, recursive = TRUE, showWarnings = FALSE)
dir.create(path_data, recursive = TRUE, showWarnings = FALSE)
dir.create(path_resource, recursive = TRUE, showWarnings = FALSE)
```

```{r packages}
#| message: false
#| warning: false
suppressPackageStartupMessages({
  library(here)
  library(conflicted)
  library(tidyverse)
  library(data.table)
  library(clusterProfiler)
  library(DESeq2)
  library(org.Hs.eg.db) 
  library(clusterProfiler)
  library(ggrepel)
  library(enrichplot)
  library(scales)
  library(ggpubr)
  library(ANCOMBC)
  library(SingleCellExperiment)
  library(DT)
  library(phyloseq)
  library(microbiome)
  library(mia)
  library(Maaslin2)
  library(vegan)
  devtools::load_all()
})

conflict_prefer("as.factor", "base")
```

## Tasks

### deseq lliver enrich


```{r deseq lliver enrich}
load(here(path_data, "deseq2.dds.RData"))
input <- as.data.frame(assays(dds)$counts)
ds <- data.frame(row.names = names(input),Group=c("CF","CF","CF","CF","CF","CF","ZF","ZF","ZF","ZF","ZF","ZF"))
ds$Sample <- row.names(ds)
ds$Group <- factor(ds$Group,levels = c("ZF","CF"))#CF VS. ZF

sample6 <- c("z5s3","z5s5","z5s6","z2s1","z2s2","z2s3")
input6 <- input[,sample6]
input6 <- input6[rowSums(input6 == 0) < 3,]
ds6 <- ds[sample6,]

ds6$Group <- as.factor(ds6$Group)
dds6 <- DESeqDataSetFromMatrix(countData = input6, colData = ds6, design = ~ Group)
dds6 <- estimateSizeFactors(dds6)

#nrow(dds6)

dds_result6 <- DESeq(dds6)
nrow(dds_result6)
res6 <- results(dds_result6)
mcols(res6, use.names = TRUE)
summary(res6)
res6_df <- as.data.frame(res6)

# Remove rows where pvalue and padj are 0 or NA
res6_cleaned <- res6_df[!(is.na(res6_df$pvalue) | res6_df$pvalue == 0 | is.na(res6_df$padj) | res6_df$padj == 0), ]


res6_rlog <- rlog(dds_result6)
res6_rlog <- as.data.frame(assay(res6_rlog))
write.csv(res6_rlog,path_target("res6_rlog.csv"))

X <- abs(res6_cleaned$log2FoldChange)
res6_cleaned$abs <- X
diff_genes <- res6_cleaned[res6_cleaned$padj < 0.05,]
diff_genes <- diff_genes[res6_cleaned$abs >= 0.585,]

row.names(diff_genes) <- gsub("^gene-", "", row.names(diff_genes))
write.csv(diff_genes,path_target("res6_diff_genes.csv"))
# Get ENTREZID for differential genes
gene_symbols <- row.names(diff_genes)
gene_symbols

gene_symbols_cleaned <- gsub("^gene-", "", gene_symbols)
write.csv(gene_symbols_cleaned,path_target("gene_symbols_cleaned6.csv"))
entrezid_all <- na.omit(gene_symbols_cleaned) # 移除没有对应ENTREZID的基因
entrezid_all <- mapIds(org.Hs.eg.db,keys = entrezid_all,column = "ENTREZID",keytype = "SYMBOL")

# KEGG enrichment analysis
keggo <- enrichKEGG(gene = entrezid_all, 
                    keyType = "kegg", 
                    pAdjustMethod = "BH", 
                    organism = "hsa"
                 )


keggp <- keggo %>%  clusterProfiler::filter(pvalue<0.05)
keggp <- as.data.frame(keggp@result)
keggp$Description[keggp$Description == "Glycosaminoglycan biosynthesis - chondroitin sulfate / dermatan sulfate"] <- "Glycosaminoglycan biosynthesis"
#keggp[28,4] <- "Glycosaminoglycan biosynthesis"#

keggp$GeneRatio <- keggp$Count/334
keggp <- keggp[!keggp$category == "Human Diseases",]

ggplot(keggp, aes(x = GeneRatio, 
                        y = reorder(Description, GeneRatio), 
                        size = Count, 
                        color = pvalue)) +
  geom_point(alpha = 0.8) +
  scale_size_continuous(name = "Count", 
                        range = c(8, 18),
                        breaks = pretty_breaks(4)) +
  scale_color_gradientn(name = "pvalue",
                        colors = c("#FF0000", "#3FA0C0"),
                        
                        values = scales::rescale(c(min(-log10(keggp$pvalue)), 
                                                   median(-log10(keggp$pvalue)), 
                                                 max(-log10(keggp$pvalue))))) +
  labs(x = "GeneRatio", y = NULL) +
  theme_minimal(base_size = 20) +
  theme(
    panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
    panel.grid.minor = element_blank(),
    axis.title.x = element_text(face = "bold", size = 24, margin = margin(t = 15)),
    axis.text.x = element_text(size = 20, color = "black", face = "bold"),
    axis.text.y = element_text(size = 20, color = "black", face = "bold"),
    legend.title = element_text(face = "bold", size = 20),
    legend.text = element_text(size = 18, face = "bold"),
    legend.position = "right",
    legend.key.height = unit(1, "cm"),
    plot.margin = unit(c(1, 1, 1, 1), "cm"),
    plot.background = element_rect(fill = "white", color = NA),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5)
  ) +
  guides(
    color = guide_colorbar(barwidth = 1, barheight = 15),
    size = guide_legend(override.aes = list(color = "black"))
  )
ggsave(path_target("keggp17_new.pdf"),width = 17,height = 17)
ggsave(path_target("keggp17_new.png"),width = 17,height = 17)
```


### ancombca

```{r ancombc}
# Import data
# OTU table
otu_table <- read.csv(here(path_data, "otu_table.csv"),header = T,row.names = 1)
# Taxonomy table
tax <- read.csv(here(path_data, "taxonomy.csv"),header = T,row.names = 1)

# Metadata
meta_data <- read.csv(here(path_data, "group.csv"),row.names = 1)

# Data preprocessing
# Data cleaning
# Phyloseq object: create phyloseq object
# aggregate_taxa: aggregate genus/species abundance
# TreeSummarizedExperiment: create TreeSummarizedExperiment object
# Data cleaning
tax$Species <- gsub("^s__", "", tax$Species)
tax$Genus <- gsub("^g__", "", tax$Genus)
tax$Family <- gsub("^f__", "", tax$Family)
tax$Order <- gsub("^o__","",tax$Order)
tax$Class <- gsub("^c__","",tax$Class)
tax$Phylum <- gsub("^p__","",tax$Phylum)
tax$Kingdom <- gsub("^d__","",tax$Kingdom)
tax[] <- apply(tax, 2, function(x) ifelse(x == " " | x == "", NA, x))
tax <- as.matrix(tax)
# Phyloseq object
OTU <- phyloseq::otu_table(otu_table, taxa_are_rows = TRUE)
META <- phyloseq::sample_data(meta_data)
TAX <- phyloseq::tax_table(as.matrix(tax))
otu_data <- phyloseq::phyloseq(OTU, TAX, META)
# aggregate_taxa abundance
genus_data <- microbiome::aggregate_taxa(otu_data, "Genus")
species_data <- microbiome::aggregate_taxa(otu_data, "Species")

# TreeSummarizedExperiment object
tse <- mia::makeTreeSummarizedExperimentFromPhyloseq(otu_data)
tse
if (file.exists(path_target("rds/primary_ancombc2_Species4.rds"))) {
  primary_ancombc2_species_output <- readRDS(path_target("rds/primary_ancombc2_Species4.rds"))
} else {
  primary_ancombc2_species_output <- ancombc2(
    data = tse, 
    assay_name = "counts", 
    tax_level = "Species",
    fix_formula = "Group", 
    rand_formula = NULL,
    p_adj_method = "BY",
    prv_cut = 0.10, 
    lib_cut = 1000, 
    s0_perc = 0.05,
    group = "Group", 
    struc_zero = TRUE, 
    neg_lb = TRUE,
    alpha = 0.05, 
    n_cl = 8, 
    verbose = TRUE,
    global = TRUE, 
   pairwise = FALSE, 
    dunnet = FALSE,  
    trend = FALSE,   
    iter_control = list(tol = 1e-2, max_iter = 10, verbose = TRUE),
    em_control = list(tol = 1e-5, max_iter = 100),
    lme_control = lme4::lmerControl(),
    mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
    trend_control = NULL  
  )
  # Create directory if it doesn't exist
  if (!dir.exists(path_target("rds"))) {
    dir.create(path_target("rds"), recursive = TRUE)
  }
 # Save results
  saveRDS(primary_ancombc2_species_output, path_target("rds/primary_ancombc2_Species4.rds"))
}
primary_ancombc2_species_output <-readRDS(path_target("rds/primary_ancombc2_Species4.rds"))

# Results: This may take a while to run. The output includes:
# "feature_table": microbial relative abundance table
# "bias_correct_log_table": bias-corrected microbial relative abundance table
# "ss_tab": sensitivity score table for pseudo-count addition to zero
# "zero_ind": a logical data frame with TRUE indicating structural zeros detected in certain groups
# "samp_frac": estimated sampling fractions on log scale (natural log)
# "delta_em": estimated sample-specific biases via E-M algorithm
# "delta_wls": estimated sample-specific biases via WLS algorithm
# "res": ANCOM-BC2 primary results
# "res_global": ANCOM-BC2 global test results for specified variables in group
# "res_pair": ANCOM-BC2 pairwise directional test results for specified variables in group
# "res_dunn": ANCOM-BC2 Dunnett-type test results for specified variables in group
# "res_trend": ANCOM-BC2 trend test results for specified variables in group
# Bias-corrected microbial relative abundance
bias_correct_log_table <- primary_ancombc2_species_output$bias_correct_log_table %>% rownames_to_column("species")
write.csv(bias_correct_log_table, path_target("bias_correct_log_table.csv"), row.names = F)

# Primary results
res_trend <- primary_ancombc2_species_output[["res"]] %>%
  dplyr::filter(p_GroupZF < 0.05) %>%
  dplyr::arrange(taxon)
write.csv(res_trend,path_target("res_trend_unique.csv"))

feature <- primary_ancombc2_species_output[["feature_table"]]

df_fig_group <- res_trend %>%
  dplyr::transmute(taxon, 
                  group ="ZF",
                   value = round((lfc_GroupZF), 2),
                  p_GroupZF) %>%
 dplyr::mutate( color = ifelse(p_GroupZF < 0.05, "black", "black")) %>%
  dplyr::arrange(desc(color))


set1 <- base::sort(unique(df_fig_group$taxon))

# Reorder taxon in df_fig_group according to set1
df_fig_group$taxon <- factor(df_fig_group$taxon, levels = set1)

# Create color mapping
distinct_df <- df_fig_group %>%
  dplyr::select(taxon, color) %>%
  dplyr::distinct()
tax_color <- setNames(distinct_df$color, distinct_df$taxon)

# Keep only unique species (set2) related data
df_fig_group_unique <- df_fig_group %>%
  clusterProfiler::filter(taxon %in% set1)
# Get maximum value for heatmap color range
cell_max <- max(abs(df_fig_group_unique$value))
# Draw heatmap
fig_group_species_unique <- df_fig_group_unique %>%
  ggplot(aes(x = group, y = taxon, fill = value)) +
  geom_tile(color = "black") +
  scale_fill_gradientn(
    colors = c("#0000FF", "white", "red"), 
    values = c(0, 0.5, 1), 
    limits = c(-1.66, 2.85), 
    na.value = "white",  
    name = NULL
  ) +
  geom_text(aes(group, taxon, label = value), 
            color = "black", size = 8, fontface = "bold") + 
  labs(x = NULL, y = NULL, title = "") +
  theme_minimal() +
  theme(
 
    axis.text.y = element_text(color = tax_color, size = 18, face = "bold"),  
    axis.text.x = element_text(angle = 0, hjust = 1, size = 18, face = "bold"),  
    axis.title.x = element_text(size = 21, face = "bold"), 
    axis.title.y = element_text(size = 18, face = "bold"),
    legend.text = element_text(size = 18, face = "bold") 
  )

print(fig_group_species_unique)
ggsave(path_target("species_ancombc.pdf"),width = 8,height = 10)
ggsave(path_target("species_ancombc.png"),width = 8,height = 10)
```

### Salmon

```{r }
salm <- read.csv(here(path_data, "salmon_counts_ko.tsv"),row.names = 1,sep = "\t")
salm <- salm[,-37]

salm <- round(salm)
input_metadata <- read.csv(here(path_data, "input_metadata.csv"),header = T,row.names = 1)
fit_duck <- Maaslin2(
  salm,
  input_metadata,
  output = path_target("ko_output_salmon"), 
  min_abundance = 0.00001,
  min_prevalence = 0.1,
  min_variance = 0.0,
 normalization = "TSS",
  transform = "LOG",
  analysis_method = "LM",
  max_significance = 0,
  random_effects = NULL,
  fixed_effects = "Group",
  correction = "BH",
  standardize = TRUE,
  cores = 1,
  plot_heatmap = TRUE,
  heatmap_first_n = 0,
  plot_scatter = TRUE,
  max_pngs = 0,
  save_scatter = FALSE,
  save_models = FALSE,
  reference = NULL
)

all_result_salm <- read.csv(path_target("ko_output_salmon/all_results.tsv"),row.names = 1,sep = "\t")
sig <- all_result_salm[all_result_salm$pval <0.05,]
sig_salm <- salm[row.names(sig),]
sig_salm <- row.names(sig)
kegg_enrich <- enrichKEGG(
  gene = sig_salm,
  organism = "ko",      
  keyType = "kegg",      
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH"
)

x_zscor <- kegg_enrich@result
write.csv(x_zscor,path_target("KO_KEGG_salm_maaslin.csv"))



# Select pathways for display
m6 <- c("Pyruvate metabolism","Methane metabolism",
        "Phosphonate and phosphinate metabolism","Citrate cycle (TCA cycle)","Glycolysis / Gluconeogenesis","Pentose and glucuronate interconversions","Pentose phosphate pathway")
pathway6 <- x_zscor[x_zscor$Description %in% m6,]

keggp_long6 <- separate_rows(pathway6, geneID, sep = "/")

all_result_salm$logp <- -log10(all_result_salm$pval)
all_result_salm$logp <- all_result_salm$logp*sign(all_result_salm$coef)
all_result_salm$geneID <- row.names(all_result_salm)
keggp_long6_maaslin <- merge(
  x = keggp_long6,
  y = all_result_salm,
  by = "geneID",
  all.x = TRUE 
)



ggplot(keggp_long6_maaslin, aes(x = logp, y = geneID, fill = Description)) +
  geom_bar(
    stat = "identity",
    position = position_dodge(width = 0.8),  
    width = 0.8  
  ) +
  scale_x_continuous(
    breaks = c(-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10),
    labels = c(-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10)
  ) +
  facet_grid(Description ~ ., scales = "free_y", space = "free_y") +  
  theme_minimal(base_size = 12) +
  labs(x = expression(-log[10](p)), y = NULL) + 
  theme(
    text = element_text(family = "sans", face = "bold"),  
    strip.text.x = element_text(size = 12, face = "bold", margin = margin(b = 5)),  
    strip.text.y = element_blank(),  
    axis.text = element_text(size = 10, face = "bold"), 
    axis.text.y = element_text(size = 9), 
    axis.title.x = element_text(size = 12, face = "bold"),  
    panel.spacing = unit(0.5, "lines"),  
    legend.position = "none"  
  )

ggsave(path_target("maaslin_kegg_ko.pdf"), height = 12, width = 6)

ggsave(path_target("maaslin_kegg_ko.png"), height = 12, width = 6)



# Remove non-metabolic pathways
keggp <- x_zscor %>%  clusterProfiler::filter(pvalue<0.05)
xx <- c("ko01320","ko03040","ko04112")
keggp <- keggp[!row.names(keggp) %in% xx, ]
keggp$GeneRatio <- keggp$Count/277
ggplot(keggp, aes(x = GeneRatio, 
                        y = reorder(Description, GeneRatio), 
                        size = Count, 
                        color = pvalue)) +
  geom_point(alpha = 0.8) +
  scale_size_continuous(name = "Count", 
                        range = c(8, 18),
                        breaks = pretty_breaks(4)) +
  scale_color_gradientn(name = "pvalue",
                        colors = c("#FF0000", "#3FA0C0"),
                        
                        values = scales::rescale(c(min(-log10(keggp$pvalue)), 
                                                   median(-log10(keggp$pvalue)), 
                                                 max(-log10(keggp$pvalue))))) +
  labs(x = "GeneRatio", y = NULL) +
  theme_minimal(base_size = 20) +
  theme(
    panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
    panel.grid.minor = element_blank(),
    axis.title.x = element_text(face = "bold", size = 24, margin = margin(t = 15)),
    axis.text.x = element_text(size = 20, color = "black", face = "bold"),
    axis.text.y = element_text(size = 20, color = "black", face = "bold"),
    legend.title = element_text(face = "bold", size = 20),
    legend.text = element_text(size = 18, face = "bold"),
    legend.position = "right",
    legend.key.height = unit(1, "cm"),
    plot.margin = unit(c(1, 1, 1, 1), "cm"),
    plot.background = element_rect(fill = "white", color = NA),
    # Add solid panel borders
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5)
  ) +
  guides(
    color = guide_colorbar(barwidth = 1, barheight = 15),
    size = guide_legend(override.aes = list(color = "black"))
  )
ggsave(path_target("kegg_salm_all.pdf"),width = 17,height = 15)
ggsave(path_target("kegg_salm_all.png"),width = 17,height = 15)
```


### NMDS

```{r }
normal <- read.csv(path_target("ko_output_salmon/features/filtered_data_norm.tsv"),row.names = 1,sep = "\t")
# Keep only significant features
normal_sig <- normal[,row.names(sig)]
dune <- normal_sig
# Load metadata
metadata <-input_metadata
# 1. Calculate distance matrix (using Bray-Curtis distance)
dist_matrix <- vegdist(dune, method = "bray")
# Define group order

# 3. NMDS analysis
nmds_result <- metaMDS(dune, distance = "bray", k = 2) 
df_nmds_stress <- nmds_result$stress
df_nmds_stress# 0.1120145
nmds_scores <- as.data.frame(nmds_result$points)
colnames(nmds_scores) <- c("NMDS1", "NMDS2")
nmds_scores$Group <- metadata$Group  
# PERMANOVA test using adonis()
adonis_result <- adonis2(dist_matrix ~ Group, method = "bray", data = metadata, permutations = 999)

# View PERMANOVA results
summary(adonis_result)
# Extract R2 and p-value
r2 <- adonis_result$R2[1]  
r2#0.1666891
p_value <- adonis_result$`Pr(>F)`[1]  
p_value#0.001


my_colors <- c("#3FA0C0","#FF0000",  "orange" ,"yellow","#4c6","#0000FF")
label_text <- sprintf("\nR² = %.3f\np = %.3f", r2, p_value)

plot_NMDS_day <- ggplot(nmds_scores, aes(x = NMDS1, y = NMDS2, color = Group)) +
  geom_point(size = 4) +
  stat_ellipse(aes(group = Group), level = 0.95, linewidth = 1) +  
  theme_bw() +
  labs(title = " ",
       x = "NMDS1",
       y = "NMDS2") +
  scale_color_manual(values = my_colors) +  
  scale_shape_manual(values = c(16,17,2, 18)) +  
  theme(  
    axis.title.x = element_text(size = 26, face = "bold"),  
    axis.title.y = element_text(size = 26, face = "bold"),  
    axis.text.x = element_text(size = 24, color = "black", face = "bold"),   
    axis.text.y = element_text(size = 24, color = "black", face = "bold"),     
    legend.title = element_text(size = 24, face = "bold"),   
    legend.text = element_text(size = 24, face = "bold")      
  )  +
  annotate(
    "text", 
    x = min(nmds_scores$NMDS1),  
    y = max(nmds_scores$NMDS2),  
    label = label_text,
    hjust = 0.5,  
    vjust = 0.5, 
    color = "black",
    fontface = "bold"
  )

print(plot_NMDS_day)
ggsave(plot = plot_NMDS_day, path_target("NMDS_KO.pdf"), height = 5.5, width = 7.5)
ggsave(plot = plot_NMDS_day, path_target("NMDS_KO.png"), height = 5.5, width = 7.5)
```

### K00163

```{r }
plot_unified <- function(data, y_var, y_label) {
  data$Group <- factor(data$Group)
  n_groups <- length(levels(data$Group))
  default_colors <- scales::hue_pal()(n_groups)
  reversed_colors <- rev(default_colors)
  names(reversed_colors) <- levels(data$Group) 
  y_max <- max(data[[y_var]], na.rm = TRUE)
  
  ggplot(data, aes(x = Group, y = .data[[y_var]])) +
    geom_boxplot(aes(fill = Group), alpha = 0.5, 
                 outlier.colour = "black", outlier.shape = 21, outlier.size = 0) +
    geom_jitter(aes(color = Group), 
                width = 0.2, height = 0, size = 2, alpha = 0.7) +
    geom_signif(
      comparisons = list(levels(data$Group)),
      map_signif_level = function(p) "*",
      y_position = y_max * 1.1,
      tip_length = 0,
      textsize = 18,
      size = 1.5
    ) +
    scale_fill_manual(values = reversed_colors) +
    scale_color_manual(values = reversed_colors) +
    scale_y_continuous(limits = c(NA, y_max * 1.2)) +
    theme_bw() +
    labs(x = "", y = y_label) +
    theme(
      axis.title = element_text(size = 40),
      axis.text = element_text(size = 40),
      legend.position = "none"
    )
}
normal$Group <- input_metadata$Group
p1 <- plot_unified(normal[, c("Group", "K00163")], "K00163", "Relative abundance of K00163")
ggsave(plot = p1, path_target("k00163.pdf"), height = 8, width =8)
ggsave(plot = p1, path_target("k00163.png"), height = 8, width = 8)
```

## Files written

These files have been written to the target directory, `r paste0("data/", params$name)`:

```{r list-files-target}
projthis::proj_dir_info(path_target(), tz = "CET")
```

